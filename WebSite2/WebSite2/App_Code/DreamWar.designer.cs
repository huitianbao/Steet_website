#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Dreamwar")]
public partial class DreamWarDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region 可扩展性方法定义
  partial void OnCreated();
  partial void InsertWriters(Writers instance);
  partial void UpdateWriters(Writers instance);
  partial void DeleteWriters(Writers instance);
  partial void InsertArticles(Articles instance);
  partial void UpdateArticles(Articles instance);
  partial void DeleteArticles(Articles instance);
  partial void InsertMessage(Message instance);
  partial void UpdateMessage(Message instance);
  partial void DeleteMessage(Message instance);
  partial void Inserttable(table instance);
  partial void Updatetable(table instance);
  partial void Deletetable(table instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public DreamWarDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DreamwarConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DreamWarDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DreamWarDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DreamWarDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DreamWarDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Writers> Writers
	{
		get
		{
			return this.GetTable<Writers>();
		}
	}
	
	public System.Data.Linq.Table<Articles> Articles
	{
		get
		{
			return this.GetTable<Articles>();
		}
	}
	
	public System.Data.Linq.Table<Message> Message
	{
		get
		{
			return this.GetTable<Message>();
		}
	}
	
	public System.Data.Linq.Table<table> table
	{
		get
		{
			return this.GetTable<table>();
		}
	}
	
	public System.Data.Linq.Table<User> User
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Writers")]
public partial class Writers : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _WriterName;
	
	private string _Password;
	
	private System.Nullable<int> _QQ;
	
	private string _Email;
	
	private System.Nullable<int> _Tel;
	
	private string _Information;
	
	private EntityRef<Articles> _Articles;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWriterNameChanging(string value);
    partial void OnWriterNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnQQChanging(System.Nullable<int> value);
    partial void OnQQChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTelChanging(System.Nullable<int> value);
    partial void OnTelChanged();
    partial void OnInformationChanging(string value);
    partial void OnInformationChanged();
    #endregion
	
	public Writers()
	{
		this._Articles = default(EntityRef<Articles>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriterName", DbType="Char(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string WriterName
	{
		get
		{
			return this._WriterName;
		}
		set
		{
			if ((this._WriterName != value))
			{
				if (this._Articles.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWriterNameChanging(value);
				this.SendPropertyChanging();
				this._WriterName = value;
				this.SendPropertyChanged("WriterName");
				this.OnWriterNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="Char(50) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QQ", DbType="Int")]
	public System.Nullable<int> QQ
	{
		get
		{
			return this._QQ;
		}
		set
		{
			if ((this._QQ != value))
			{
				this.OnQQChanging(value);
				this.SendPropertyChanging();
				this._QQ = value;
				this.SendPropertyChanged("QQ");
				this.OnQQChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="Int")]
	public System.Nullable<int> Tel
	{
		get
		{
			return this._Tel;
		}
		set
		{
			if ((this._Tel != value))
			{
				this.OnTelChanging(value);
				this.SendPropertyChanging();
				this._Tel = value;
				this.SendPropertyChanged("Tel");
				this.OnTelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Information", DbType="Char(255)")]
	public string Information
	{
		get
		{
			return this._Information;
		}
		set
		{
			if ((this._Information != value))
			{
				this.OnInformationChanging(value);
				this.SendPropertyChanging();
				this._Information = value;
				this.SendPropertyChanged("Information");
				this.OnInformationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Articles_Writers", Storage="_Articles", ThisKey="WriterName", OtherKey="Author", IsForeignKey=true)]
	public Articles Articles
	{
		get
		{
			return this._Articles.Entity;
		}
		set
		{
			Articles previousValue = this._Articles.Entity;
			if (((previousValue != value) 
						|| (this._Articles.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Articles.Entity = null;
					previousValue.Writers.Remove(this);
				}
				this._Articles.Entity = value;
				if ((value != null))
				{
					value.Writers.Add(this);
					this._WriterName = value.Author;
				}
				else
				{
					this._WriterName = default(string);
				}
				this.SendPropertyChanged("Articles");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Articles")]
public partial class Articles : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Atricle_title;
	
	private string _Context;
	
	private string _Author;
	
	private EntitySet<Writers> _Writers;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAtricle_titleChanging(string value);
    partial void OnAtricle_titleChanged();
    partial void OnContextChanging(string value);
    partial void OnContextChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    #endregion
	
	public Articles()
	{
		this._Writers = new EntitySet<Writers>(new Action<Writers>(this.attach_Writers), new Action<Writers>(this.detach_Writers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Atricle_title", DbType="Char(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Atricle_title
	{
		get
		{
			return this._Atricle_title;
		}
		set
		{
			if ((this._Atricle_title != value))
			{
				this.OnAtricle_titleChanging(value);
				this.SendPropertyChanging();
				this._Atricle_title = value;
				this.SendPropertyChanged("Atricle_title");
				this.OnAtricle_titleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Context", DbType="NVarChar(MAX)")]
	public string Context
	{
		get
		{
			return this._Context;
		}
		set
		{
			if ((this._Context != value))
			{
				this.OnContextChanging(value);
				this.SendPropertyChanging();
				this._Context = value;
				this.SendPropertyChanged("Context");
				this.OnContextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="Char(50) NOT NULL", CanBeNull=false)]
	public string Author
	{
		get
		{
			return this._Author;
		}
		set
		{
			if ((this._Author != value))
			{
				this.OnAuthorChanging(value);
				this.SendPropertyChanging();
				this._Author = value;
				this.SendPropertyChanged("Author");
				this.OnAuthorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Articles_Writers", Storage="_Writers", ThisKey="Author", OtherKey="WriterName")]
	public EntitySet<Writers> Writers
	{
		get
		{
			return this._Writers;
		}
		set
		{
			this._Writers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Writers(Writers entity)
	{
		this.SendPropertyChanging();
		entity.Articles = this;
	}
	
	private void detach_Writers(Writers entity)
	{
		this.SendPropertyChanging();
		entity.Articles = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long @__msgId;
	
	private string _msgUser;
	
	private string _msgTitle;
	
	private string _msgContent;
	
	private System.Nullable<System.DateTime> _pubDate;
	
	private string _typePicPath;
	
	private string _reply;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On_msgIdChanging(long value);
    partial void On_msgIdChanged();
    partial void OnmsgUserChanging(string value);
    partial void OnmsgUserChanged();
    partial void OnmsgTitleChanging(string value);
    partial void OnmsgTitleChanged();
    partial void OnmsgContentChanging(string value);
    partial void OnmsgContentChanged();
    partial void OnpubDateChanging(System.Nullable<System.DateTime> value);
    partial void OnpubDateChanged();
    partial void OntypePicPathChanging(string value);
    partial void OntypePicPathChanged();
    partial void OnreplyChanging(string value);
    partial void OnreplyChanged();
    #endregion
	
	public Message()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ msgId]", Storage="__msgId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long _msgId
	{
		get
		{
			return this.@__msgId;
		}
		set
		{
			if ((this.@__msgId != value))
			{
				this.On_msgIdChanging(value);
				this.SendPropertyChanging();
				this.@__msgId = value;
				this.SendPropertyChanged("_msgId");
				this.On_msgIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_msgUser", DbType="VarChar(20)")]
	public string msgUser
	{
		get
		{
			return this._msgUser;
		}
		set
		{
			if ((this._msgUser != value))
			{
				this.OnmsgUserChanging(value);
				this.SendPropertyChanging();
				this._msgUser = value;
				this.SendPropertyChanged("msgUser");
				this.OnmsgUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_msgTitle", DbType="VarChar(20)")]
	public string msgTitle
	{
		get
		{
			return this._msgTitle;
		}
		set
		{
			if ((this._msgTitle != value))
			{
				this.OnmsgTitleChanging(value);
				this.SendPropertyChanging();
				this._msgTitle = value;
				this.SendPropertyChanged("msgTitle");
				this.OnmsgTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_msgContent", DbType="VarChar(MAX)")]
	public string msgContent
	{
		get
		{
			return this._msgContent;
		}
		set
		{
			if ((this._msgContent != value))
			{
				this.OnmsgContentChanging(value);
				this.SendPropertyChanging();
				this._msgContent = value;
				this.SendPropertyChanged("msgContent");
				this.OnmsgContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pubDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> pubDate
	{
		get
		{
			return this._pubDate;
		}
		set
		{
			if ((this._pubDate != value))
			{
				this.OnpubDateChanging(value);
				this.SendPropertyChanging();
				this._pubDate = value;
				this.SendPropertyChanged("pubDate");
				this.OnpubDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typePicPath", DbType="VarChar(50)")]
	public string typePicPath
	{
		get
		{
			return this._typePicPath;
		}
		set
		{
			if ((this._typePicPath != value))
			{
				this.OntypePicPathChanging(value);
				this.SendPropertyChanging();
				this._typePicPath = value;
				this.SendPropertyChanged("typePicPath");
				this.OntypePicPathChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reply", DbType="VarChar(MAX)")]
	public string reply
	{
		get
		{
			return this._reply;
		}
		set
		{
			if ((this._reply != value))
			{
				this.OnreplyChanging(value);
				this.SendPropertyChanging();
				this._reply = value;
				this.SendPropertyChanged("reply");
				this.OnreplyChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[table]")]
public partial class table : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Username;
	
	private string _Message;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
	
	public table()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(50)")]
	public string Message
	{
		get
		{
			return this._Message;
		}
		set
		{
			if ((this._Message != value))
			{
				this.OnMessageChanging(value);
				this.SendPropertyChanging();
				this._Message = value;
				this.SendPropertyChanged("Message");
				this.OnMessageChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _UserName;
	
	private string _Password;
	
	private string _Prority;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnProrityChanging(string value);
    partial void OnProrityChanged();
    #endregion
	
	public User()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="Char(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prority", DbType="VarChar(50)")]
	public string Prority
	{
		get
		{
			return this._Prority;
		}
		set
		{
			if ((this._Prority != value))
			{
				this.OnProrityChanging(value);
				this.SendPropertyChanging();
				this._Prority = value;
				this.SendPropertyChanged("Prority");
				this.OnProrityChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
